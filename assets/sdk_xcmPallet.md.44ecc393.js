import{_ as s,c as a,o as n,d as l}from"./app.5dd1b422.js";const d=JSON.parse('{"title":"Send XCM messages across Paraverse ü™ê","description":"","frontmatter":{},"headers":[{"level":3,"title":"You can use our SDK in all three scenarios:","slug":"you-can-use-our-sdk-in-all-three-scenarios","link":"#you-can-use-our-sdk-in-all-three-scenarios","children":[]},{"level":3,"title":"Video guide for this section:","slug":"video-guide-for-this-section","link":"#video-guide-for-this-section","children":[]},{"level":2,"title":"Relay chain to Parachain","slug":"relay-chain-to-parachain","link":"#relay-chain-to-parachain","children":[{"level":3,"title":"Builder pattern","slug":"builder-pattern","link":"#builder-pattern","children":[]},{"level":3,"title":"Function pattern","slug":"function-pattern","link":"#function-pattern","children":[]}]},{"level":2,"title":"Parachain to Relay chain","slug":"parachain-to-relay-chain","link":"#parachain-to-relay-chain","children":[{"level":3,"title":"Builder pattern","slug":"builder-pattern-1","link":"#builder-pattern-1","children":[]},{"level":3,"title":"Function pattern","slug":"function-pattern-1","link":"#function-pattern-1","children":[]}]},{"level":2,"title":"Parachain to Parachain","slug":"parachain-to-parachain","link":"#parachain-to-parachain","children":[{"level":3,"title":"Builder pattern","slug":"builder-pattern-2","link":"#builder-pattern-2","children":[]},{"level":3,"title":"Function pattern","slug":"function-pattern-2","link":"#function-pattern-2","children":[]}]},{"level":2,"title":"Ecosystem Bridges","slug":"ecosystem-bridges","link":"#ecosystem-bridges","children":[{"level":3,"title":"Polkadot <> Kusama bridge","slug":"polkadot-kusama-bridge","link":"#polkadot-kusama-bridge","children":[]},{"level":3,"title":"Polkadot <> Ethereum bridge (Snowbridge)","slug":"polkadot-ethereum-bridge-snowbridge","link":"#polkadot-ethereum-bridge-snowbridge","children":[]}]},{"level":2,"title":"Batch calls","slug":"batch-calls","link":"#batch-calls","children":[]},{"level":2,"title":"Query existential deposit","slug":"query-existential-deposit","link":"#query-existential-deposit","children":[]},{"level":2,"title":"XCM Transfer info","slug":"xcm-transfer-info","link":"#xcm-transfer-info","children":[]},{"level":2,"title":"Developer experience","slug":"developer-experience","link":"#developer-experience","children":[{"level":3,"title":"Builder pattern experience","slug":"builder-pattern-experience","link":"#builder-pattern-experience","children":[]},{"level":3,"title":"Control messages into the console","slug":"control-messages-into-the-console","link":"#control-messages-into-the-console","children":[]}]}],"relativePath":"sdk/xcmPallet.md"}'),e={name:"sdk/xcmPallet.md"},o=l(`<h1 id="send-xcm-messages-across-paraverse-ü™ê" tabindex="-1">Send XCM messages across Paraverse ü™ê <a class="header-anchor" href="#send-xcm-messages-across-paraverse-ü™ê" aria-hidden="true">#</a></h1><h3 id="you-can-use-our-sdk-in-all-three-scenarios" tabindex="-1">You can use our SDK in all three scenarios: <a class="header-anchor" href="#you-can-use-our-sdk-in-all-three-scenarios" aria-hidden="true">#</a></h3><ul><li>Relay chain to Parachain XCM transfer</li><li>Parachain to Relay chain XCM transfer</li><li>Parachain to Parachain XCM transfer</li></ul><h3 id="video-guide-for-this-section" tabindex="-1">Video guide for this section: <a class="header-anchor" href="#video-guide-for-this-section" aria-hidden="true">#</a></h3><p><a href="https://youtu.be/MoCrt2vYJJU" target="_blank" rel="noreferrer"><img src="https://user-images.githubusercontent.com/55763425/238154617-0b57c5c8-76cf-490c-812d-481f097f4977.png" alt="xcmPallet"></a></p><h2 id="relay-chain-to-parachain" tabindex="-1">Relay chain to Parachain <a class="header-anchor" href="#relay-chain-to-parachain" aria-hidden="true">#</a></h2><p>Only the <code>to</code> parameter is provided, thus the Relay chain to Parachain scenario will be used.</p><h3 id="builder-pattern" tabindex="-1">Builder pattern <a class="header-anchor" href="#builder-pattern" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Builder</span><span style="color:#A6ACCD;">(api)        </span><span style="color:#676E95;font-style:italic;">//Api parameter is optional and can also be ws_url_string</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Basilisk</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)       </span><span style="color:#676E95;font-style:italic;">// Destination Parachain //You can now add custom ParachainID eg. .to(&#39;Basilisk&#39;, 2024) or use custom Multilocation</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">amount</span><span style="color:#A6ACCD;">(amount)       </span><span style="color:#676E95;font-style:italic;">// Token amount</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">address</span><span style="color:#A6ACCD;">(address)     </span><span style="color:#676E95;font-style:italic;">// AccountId32 or AccountKey20 address or custom Multilocation</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/*.xcmVersion(Version.V1/V2/V3/V4)  //Optional parameter for manual override of XCM Version used in call*/</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()              </span><span style="color:#676E95;font-style:italic;">// Function called to build call</span></span>
<span class="line"></span></code></pre></div><h3 id="function-pattern" tabindex="-1">Function pattern <a class="header-anchor" href="#function-pattern" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> paraspell</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xcmPallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transferRelayToPara</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    api?</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;">//Api parameter (Optional) + can also be ws_url_string</span></span>
<span class="line"><span style="color:#A6ACCD;">    destination</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// Destination Parachain or custom Multilocation</span></span>
<span class="line"><span style="color:#A6ACCD;">    amount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">               </span><span style="color:#676E95;font-style:italic;">// Token amount</span></span>
<span class="line"><span style="color:#A6ACCD;">    to                    </span><span style="color:#676E95;font-style:italic;">// AccountId32 or AccountKey20 address or custom Multilocation</span></span>
<span class="line"><span style="color:#A6ACCD;">    paraIdTo?</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">//Custom destination parachain ID (Optional)</span></span>
<span class="line"><span style="color:#A6ACCD;">    destApiForKeepAlive?  </span><span style="color:#676E95;font-style:italic;">//Api parameter for keep alive check (Optional)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>AccountId32 and AccountKey20 addresses can be directly copied from PolkadotJS as our SDK has a handler to convert it into the desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftn7U</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9b2b</code></p><p>To find out more about custom multilocations reffer to the <a href="https://github.com/paraspell/xcm-tools/pull/199" target="_blank" rel="noreferrer">following PR</a>.</p><h2 id="parachain-to-relay-chain" tabindex="-1">Parachain to Relay chain <a class="header-anchor" href="#parachain-to-relay-chain" aria-hidden="true">#</a></h2><p>Only the <code>from</code> parameter is provided, thus the Parachain to Relay chain scenario will be used.</p><h3 id="builder-pattern-1" tabindex="-1">Builder pattern <a class="header-anchor" href="#builder-pattern-1" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Builder</span><span style="color:#A6ACCD;">(api)            </span><span style="color:#676E95;font-style:italic;">//Api parameter is optional and can also be ws_url_string</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Acala</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)            </span><span style="color:#676E95;font-style:italic;">// Origin Parachain</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">amount</span><span style="color:#A6ACCD;">(amount)           </span><span style="color:#676E95;font-style:italic;">// Token amount</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">address</span><span style="color:#A6ACCD;">(address)         </span><span style="color:#676E95;font-style:italic;">// AccountId32 address or custom Multilocation</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/*.xcmVersion(Version.V1/V2/V3/V4)  //Optional parameter for manual override of XCM Version used in call*/</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()                  </span><span style="color:#676E95;font-style:italic;">// Function called to build call</span></span>
<span class="line"></span></code></pre></div><h3 id="function-pattern-1" tabindex="-1">Function pattern <a class="header-anchor" href="#function-pattern-1" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> paraspell</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xcmPallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    api?</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;">//Api parameter (Optional) + can also be ws_url_string</span></span>
<span class="line"><span style="color:#A6ACCD;">    origin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">               </span><span style="color:#676E95;font-style:italic;">// Origin Parachain</span></span>
<span class="line"><span style="color:#A6ACCD;">    amount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">               </span><span style="color:#676E95;font-style:italic;">// Token amount</span></span>
<span class="line"><span style="color:#A6ACCD;">    to                    </span><span style="color:#676E95;font-style:italic;">// AccountId32 or AccountKey20 address or custom Multilocation</span></span>
<span class="line"><span style="color:#A6ACCD;">    paraIdTo?</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">//Custom destination parachain ID (Optional)</span></span>
<span class="line"><span style="color:#A6ACCD;">    destApiForKeepAlive?  </span><span style="color:#676E95;font-style:italic;">//Api parameter for keep alive check (Optional)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>AccountId32 and AccountKey20 addresses can be directly copied from PolkadotJS as our SDK has a handler to convert it into the desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftn7U</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9b2b</code></p><p>To find out more about custom multilocations reffer to the <a href="https://github.com/paraspell/xcm-tools/pull/199" target="_blank" rel="noreferrer">following PR</a>.</p><h2 id="parachain-to-parachain" tabindex="-1">Parachain to Parachain <a class="header-anchor" href="#parachain-to-parachain" aria-hidden="true">#</a></h2><p>Both <code>from</code> and <code>to</code> parameters are provided, thus the Parachain to Parachain scenario will be used.</p><p><strong>NOTE</strong> If you wish to transfer from Parachain that uses long IDs for example Moonbeam you have to add character &#39;n&#39; the end of currencyID. Eg: <code>.currency(42259045809535163221576417993425387648n)</code> will mean you transfer xcDOT.</p><h3 id="builder-pattern-2" tabindex="-1">Builder pattern <a class="header-anchor" href="#builder-pattern-2" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Builder</span><span style="color:#A6ACCD;">(api)            </span><span style="color:#676E95;font-style:italic;">//Api parameter is optional and can also be ws_url_string</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Karura</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)           </span><span style="color:#676E95;font-style:italic;">// Origin Parachain</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Basilisk</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)           </span><span style="color:#676E95;font-style:italic;">// Destination Parachain //You can now add custom ParachainID eg. .to(&#39;Basilisk&#39;, 2024) or use custom Multilocation</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currency</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">symbol</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">KSM</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//{id: currencyID} | {symbol: currencySymbol} | {symbol: Native(&#39;currencySymbol&#39;)} | {symbol: Foreign(&#39;currencySymbol&#39;)} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;)} | {multilocation: multilocationJson} | {multiasset: multilocationJsonArray})</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/*.feeAsset(feeAsset) - Parameter required when using MultilocationArray*/</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">amount</span><span style="color:#A6ACCD;">(amount)           </span><span style="color:#676E95;font-style:italic;">// Token amount</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">address</span><span style="color:#A6ACCD;">(address)         </span><span style="color:#676E95;font-style:italic;">// AccountId32 or AccountKey20 address or custom Multilocation</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">/*.xcmVersion(Version.V1/V2/V3/V4)  //Optional parameter for manual override of XCM Version used in call*/</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()                  </span><span style="color:#676E95;font-style:italic;">// Function called to build call</span></span>
<span class="line"></span></code></pre></div><h3 id="function-pattern-2" tabindex="-1">Function pattern <a class="header-anchor" href="#function-pattern-2" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> paraspell</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xcmPallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    api?</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;">//Api parameter (Optional) + can also be ws_url_string</span></span>
<span class="line"><span style="color:#A6ACCD;">    origin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">               </span><span style="color:#676E95;font-style:italic;">// Origin Parachain</span></span>
<span class="line"><span style="color:#A6ACCD;">    currency</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">             </span><span style="color:#676E95;font-style:italic;">// {id: currencyID} | {symbol: currencySymbol} | {symbol: Native(&#39;currencySymbol&#39;)} | {symbol: Foreign(&#39;currencySymbol&#39;)} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;)} | {multilocation: multilocationJson} | {multiasset: multilocationJsonArray})</span></span>
<span class="line"><span style="color:#A6ACCD;">    feeAsset?             </span><span style="color:#676E95;font-style:italic;">// Fee asset select id,</span></span>
<span class="line"><span style="color:#A6ACCD;">    amount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">               </span><span style="color:#676E95;font-style:italic;">// Token amount</span></span>
<span class="line"><span style="color:#A6ACCD;">    to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">                   </span><span style="color:#676E95;font-style:italic;">// AccountId32 or AccountKey20 address or custom Multilocation</span></span>
<span class="line"><span style="color:#A6ACCD;">    destination</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// Destination Parachain or custom Multilocation</span></span>
<span class="line"><span style="color:#A6ACCD;">    paraIdTo?</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">//Custom destination parachain ID (Optional)</span></span>
<span class="line"><span style="color:#A6ACCD;">    destApiForKeepAlive?  </span><span style="color:#676E95;font-style:italic;">//Api parameter for keep alive check (Optional)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>AccountId32 and AccountKey20 addresses can be directly copied from PolkadotJS as our SDK has a handler to convert it into the desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftn7U</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9b2b</code></p><p>To find out more about custom multilocations reffer to the <a href="https://github.com/paraspell/xcm-tools/pull/199" target="_blank" rel="noreferrer">following PR</a>.</p><h2 id="ecosystem-bridges" tabindex="-1">Ecosystem Bridges <a class="header-anchor" href="#ecosystem-bridges" aria-hidden="true">#</a></h2><p>This section sums up currently available and implemented ecosystem bridges that are offered in the XCM SDK. Implementing cross-ecosystem asset transfers was never this easy!</p><h3 id="polkadot-kusama-bridge" tabindex="-1">Polkadot &lt;&gt; Kusama bridge <a class="header-anchor" href="#polkadot-kusama-bridge" aria-hidden="true">#</a></h3><p>Latest SDK versions support Polkadot &lt;&gt; Kusama bridge in very native and intuitive way. You just construct the Polkadot &lt;&gt; Kusama transfer as standard Parachain to Parachain scenario transfer.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Builder</span><span style="color:#A6ACCD;">(api)            </span><span style="color:#676E95;font-style:italic;">//Api parameter is optional and can also be ws_url_string</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">AssetHubPolkadot</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)  </span><span style="color:#676E95;font-style:italic;">//Either AHP or AHK</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">AssetHubKusama</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)     </span><span style="color:#676E95;font-style:italic;">//Either AHP or AHK</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currency</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">symbol</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOT</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)        </span><span style="color:#676E95;font-style:italic;">// Either KSM or DOT </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">amount</span><span style="color:#A6ACCD;">(amount)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">address</span><span style="color:#A6ACCD;">(address)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h3 id="polkadot-ethereum-bridge-snowbridge" tabindex="-1">Polkadot &lt;&gt; Ethereum bridge (Snowbridge) <a class="header-anchor" href="#polkadot-ethereum-bridge-snowbridge" aria-hidden="true">#</a></h3><p>Just like Polkadot &lt;&gt; Kusama bridge the Snowbridge is implemented in as intuitive and native form as possible. The implementations for Polkadot -&gt; Ethereum and Ethereum -&gt; Polkadot differ due to different architecure so we will mention both scenarios.</p><h4 id="polkadot-ethereum-transfer" tabindex="-1">Polkadot -&gt; Ethereum transfer <a class="header-anchor" href="#polkadot-ethereum-transfer" aria-hidden="true">#</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Builder</span><span style="color:#A6ACCD;">(api)</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">AssetHubPolkadot</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Ethereum</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)           </span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currency</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">symbol</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">WETH</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)   </span><span style="color:#676E95;font-style:italic;">//Any supported asset by bridge eg. WETH, WBTC, SHIB and more - {symbol: currencySymbol} | {id: currencyID}</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">amount</span><span style="color:#A6ACCD;">(amount)</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">address</span><span style="color:#A6ACCD;">(eth_address)  </span><span style="color:#676E95;font-style:italic;">//AccountKey20 recipient address</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h4 id="ethereum-polkadot-transfer" tabindex="-1">Ethereum -&gt; Polkadot transfer <a class="header-anchor" href="#ethereum-polkadot-transfer" aria-hidden="true">#</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> provider </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> ethers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BrowserProvider</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ethereum)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> signer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> provider</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSigner</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EvmBuilder</span><span style="color:#A6ACCD;">(provider)      </span><span style="color:#676E95;font-style:italic;">//Ethereum provider</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">AssetHubPolkadot</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">amount</span><span style="color:#A6ACCD;">(amount)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currency</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">symbol</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">WETH</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)    </span><span style="color:#676E95;font-style:italic;">//Any supported asset by bridge eg. WETH, WBTC, SHIB and more - {symbol: currencySymbol} | {id: currencyID}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">address</span><span style="color:#A6ACCD;">(address)   </span><span style="color:#676E95;font-style:italic;">//AccountID32 recipient address</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">signer</span><span style="color:#A6ACCD;">(signer)     </span><span style="color:#676E95;font-style:italic;">//Ethereum signer address</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="batch-calls" tabindex="-1">Batch calls <a class="header-anchor" href="#batch-calls" aria-hidden="true">#</a></h2><p>You can batch XCM calls and execute multiple XCM calls within one call. All three scenarios (Para-&gt;Para, Para-&gt;Relay, Relay-&gt;Para) can be used and combined.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Builder</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;font-style:italic;">/*node api||ws_url_string - optional*/</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(NODE) </span><span style="color:#676E95;font-style:italic;">//Ensure, that origin node is the same in all batched XCM Calls.</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(NODE_2) </span><span style="color:#676E95;font-style:italic;">//Any compatible Parachain</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currency</span><span style="color:#A6ACCD;">(currency) </span><span style="color:#676E95;font-style:italic;">//Currency to transfer (If Para-&gt;Para), otherwise you do not need to specify .currency()</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">amount</span><span style="color:#A6ACCD;">(amount) </span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">address</span><span style="color:#A6ACCD;">(address </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> Multilocation object)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addToBatch</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(NODE) </span><span style="color:#676E95;font-style:italic;">//Ensure, that origin node is the same in all batched XCM Calls.</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(NODE_3) </span><span style="color:#676E95;font-style:italic;">//Any compatible Parachain</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currency</span><span style="color:#A6ACCD;">(currency) </span><span style="color:#676E95;font-style:italic;">//Currency to transfer (If Para-&gt;Para), otherwise you do not need to specify .currency()</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">amount</span><span style="color:#A6ACCD;">(amount)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">address</span><span style="color:#A6ACCD;">(address </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> Multilocation object)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addToBatch</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">buildBatch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// This settings object is optional and batch all is the default option</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> BatchMode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BATCH_ALL </span><span style="color:#676E95;font-style:italic;">//or BatchMode.BATCH</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="query-existential-deposit" tabindex="-1">Query existential deposit <a class="header-anchor" href="#query-existential-deposit" aria-hidden="true">#</a></h2><p>Latest SDK versions now offer ability to query existential deposit on implemented chains using simple call:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//PJS</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getExistentialDeposit</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@paraspell/sdk</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//PAPI</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getExistentialDeposit</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@paraspell/sdk/papi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ed </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getExistentialDeposit</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Acala</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="xcm-transfer-info" tabindex="-1">XCM Transfer info <a class="header-anchor" href="#xcm-transfer-info" aria-hidden="true">#</a></h2><p>You can now query all important information about your XCM call including information about fees (If your balance is sufficient to transfer XCM message) and more.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//PJS</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getTransferInfo</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getBalanceForeign</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getBalanceNative</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getOriginFeeDetails</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@paraspell/sdk</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//PAPI</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getTransferInfo</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getBalanceForeign</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getBalanceNative</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getOriginFeeDetails</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@paraspell/sdk/papi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Get balance of foreign currency</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getBalanceForeign</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> currency </span><span style="color:#676E95;font-style:italic;">/*- {id: currencyID} | {symbol: currencySymbol}*/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> api </span><span style="color:#676E95;font-style:italic;">/* api/ws_url_string optional */</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Get balance of native currency</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getBalanceNative</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> api </span><span style="color:#676E95;font-style:italic;">/* api/ws_url_string optional */</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Get fee information regarding XCM call</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getOriginFeeDetails</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">from</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> currency </span><span style="color:#676E95;font-style:italic;">/*- {id: currencyID} | {symbol: currencySymbol}*/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> amount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> originAddress</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> destinationAddress</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> api </span><span style="color:#676E95;font-style:italic;">/* api/ws_url_string optional */</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> feeMargin </span><span style="color:#676E95;font-style:italic;">/* 10% by default */</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Retrieves the asset balance for a given account on a specified node.</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getAssetBalance</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> currency </span><span style="color:#676E95;font-style:italic;">/*- {id: currencyID} | {symbol: currencySymbol}*/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> api </span><span style="color:#676E95;font-style:italic;">/* api/ws_url_string optional */</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Get all the information about XCM transfer</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getTransferInfo</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">from</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> address</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> destinationAddress</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> currency </span><span style="color:#676E95;font-style:italic;">/*- {id: currencyID} | {symbol: currencySymbol}*/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> amount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> api </span><span style="color:#676E95;font-style:italic;">/* api/ws_url_string optional */</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="developer-experience" tabindex="-1">Developer experience <a class="header-anchor" href="#developer-experience" aria-hidden="true">#</a></h2><h3 id="builder-pattern-experience" tabindex="-1">Builder pattern experience <a class="header-anchor" href="#builder-pattern-experience" aria-hidden="true">#</a></h3><p>When developing with the Builder pattern, the developer is guided by the typescript and thus knows which parameter can be added next. This increases the developer experience and makes SDK easier to use. <img width="459" alt="builder" src="https://user-images.githubusercontent.com/55763425/214562882-dd1a052e-c420-4131-bb50-3b656fabd10c.png"></p><h3 id="control-messages-into-the-console" tabindex="-1">Control messages into the console <a class="header-anchor" href="#control-messages-into-the-console" aria-hidden="true">#</a></h3><p>Once the call is being constructed developer is warned about major details regarding the call into the console. This way they can ensure, that the call they wanted to create is being created. <img width="409" alt="212045110-c001fcb7-8cc2-421c-9cd0-6d8205b3b11f" src="https://user-images.githubusercontent.com/55763425/212065770-48ff4b35-2463-48b3-bd51-bae56b2105a8.png"></p>`,58),t=[o];function p(r,c,i,y,D,A){return n(),a("div",null,t)}const F=s(e,[["render",p]]);export{d as __pageData,F as default};
