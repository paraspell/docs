import{_ as i,c as a,ae as e,o as n}from"./chunks/framework.DRPMfuGp.js";const c=JSON.parse('{"title":"XCM Router (SpellRouter☄️)","description":"","frontmatter":{},"headers":[],"relativePath":"api/xcmRouter.md","filePath":"api/xcmRouter.md"}'),t={name:"api/xcmRouter.md"};function l(h,s,r,p,k,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="xcm-router-spellrouter☄️" tabindex="-1">XCM Router (SpellRouter☄️) <a class="header-anchor" href="#xcm-router-spellrouter☄️" aria-label="Permalink to &quot;XCM Router (SpellRouter☄️)&quot;">​</a></h1><p>Following section covers XCM Router implementation in LightSpell XCM API. Users can use XCM Router to perform cross-chain transactions between compatible two chains and receive different assets than assets that were sent. This helps with liquidity and user experience as users do not need to perform multiple transactions to achieve the same result.</p><p>For list of supported chains/assets/dexes head over to <a href="https://paraspell.github.io/docs/supported.html#xcm-router%E2%98%84" target="_blank" rel="noreferrer">List of supported chains</a></p><h3 id="package-less-implementation-of-xcm-api-router-features-into-your-application" tabindex="-1">Package-less implementation of XCM API Router features into your application <a class="header-anchor" href="#package-less-implementation-of-xcm-api-router-features-into-your-application" aria-label="Permalink to &quot;Package-less implementation of XCM API Router features into your application&quot;">​</a></h3><p><code>NOTE:</code> We recently introduced new much simpler way to implement XCM API! You can now request hashed response of built call which offlifts you from parsing and works right away!</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> submitTransaction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  tx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TPapiTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  signer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PolkadotSigner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onSign</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TxFinalizedPayload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signSubmitAndWatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signer).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;signed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          onSign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?.();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;finalized&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.ok) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> errorMsg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.dispatchError?.value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.dispatchError.value)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Transaction failed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(errorMsg));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InvalidTxError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> typedErr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error.error;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Invalid transaction: \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">typedErr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3001/v2/router&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        from: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Origin Parachain/Relay chain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        to: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Destination Parachain/Relay chain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        currencyFrom: {currencySpec}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to send - {symbol: currencySymbol} | {id: currencyID}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        currencyTo: {currencySpec}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to receive - {symbol: currencySymbol} | {id: currencyID}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        amount: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Amount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Amount to send</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        slippagePct: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Pct&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Max slipppage percentage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        recipientAddress: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Recipient address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        senderAddress: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;InjectorAddress&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Address of sender</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        evmSenderAddress: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;EvmInjectorAddress&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EVM address of sender</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> txs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> txInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> txs) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Use the WS provider URL retrieved from the API to create an ApiPromise instance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> api</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          withPolkadotSdkCompat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWsProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(txInfo.wsProviders)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUnsafeApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">txFromCallData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Binary.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(txInfo.tx))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (txInfo.statusType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TO_EXCHANGE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // When submitting to exchange, prioritize the evmSigner if available</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> submitTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tx,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        evmSigner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signer,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> submitTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tx,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        signer,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="automatic-exchange-selection" tabindex="-1">Automatic exchange selection <a class="header-anchor" href="#automatic-exchange-selection" aria-label="Permalink to &quot;Automatic exchange selection&quot;">​</a></h2><p>If you wish to have exchange chain selection based on best price outcome, you can opt for automatic exchange selection method. This method can be selected by <strong>not using</strong> <code>exchange:</code> parameter in the call. Router will then automatically select the best exchange chain for you based on the best price outcome.</p><p><strong>Endpoint</strong>: <code>POST /v2/router-hash</code></p><ul><li><p><strong>Parameters</strong>:</p><ul><li><code>from</code>: (optional): Represents the Parachain from which the assets will be transferred.</li><li><code>to</code>: (optional): Represents the Parachain to which the assets will be transferred.</li><li><code>currencyFrom</code>: (required): Represents the asset being sent.</li><li><code>currencyTo</code>: (required): Represents the asset being received.</li><li><code>amount</code>: (required): Specifies the amount of assets to transfer.</li><li><code>slippagePct</code>: (required): Specifies the slipeage percentage.</li><li><code>recipientAddress</code>: (required): Specifies the address of the recipient.</li><li><code>injectorAddress</code>: (required): Specifies the address of the sender.</li><li><code>evmInjectorAddress</code>: (optional): Specifies the EVM address of the sender when sending from an EVM chain.</li></ul></li><li><p><strong>Errors</strong>:</p><ul><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;to&#39; is not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;to&#39; is not a valid Parachains</li><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;from&#39; is not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;from&#39; is not a valid Parachains</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyTo&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyTo&#39; is not a valid currency</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyFrom&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyFrom&#39; is not a valid currency</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;amount&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;slippagePct&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;recipientAddress&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;recipientAddress&#39; is not a valid address</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;injectorAddress&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;injectorAddress&#39; is not a valid address</li><li><code>500</code> (Internal server error) - Returned when an unknown error has occurred. In this case please open an issue.</li></ul></li></ul><p><strong>Example of request:</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3001/v2/router&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        from: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Origin Parachain/Relay chain - OPTIONAL PARAMETER</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        to: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Destination Parachain/Relay chain - OPTIONAL PARAMETER</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        currencyFrom: {currencySpec}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to send - {symbol: &#39;ASTR&#39;})</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Currency to receive - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native(&#39;currencySymbol&#39;), amount: amount} | {symbol: Foreign(&#39;currencySymbol&#39;), amount: amount} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        currencyTo: {currencySpec}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to receive - {symbol: &#39;ASTR&#39;})</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Currency to receive - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native(&#39;currencySymbol&#39;), amount: amount} | {symbol: Foreign(&#39;currencySymbol&#39;), amount: amount} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        amount: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Amount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Amount to send</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        slippagePct: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Pct&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Max slipppage percentage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        recipientAddress: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Recipient address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        senderAddress: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;InjectorAddress&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Address of sender</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="whitelist-exchange-selection" tabindex="-1">Whitelist exchange selection <a class="header-anchor" href="#whitelist-exchange-selection" aria-label="Permalink to &quot;Whitelist exchange selection&quot;">​</a></h2><p>If you wish to have exchange chain selection based on best price outcome from selected chains, you can opt for whitelist exchange selection method. This method can be selected by <strong>using desired chains in</strong> <code>exchange:</code> parameter in the call. Router will then automatically select the best exchange chain for you based on the best price outcome.</p><p><strong>Endpoint</strong>: <code>POST /v2/router-hash</code></p><ul><li><p><strong>Parameters</strong>:</p><ul><li><code>from</code>: (optional): Represents the Parachain from which the assets will be transferred.</li><li><code>exchange</code>: (optional): Represents the Parachain DEXex on which tokens can be exchanged (If not provided, DEX is selected automatically based on best price output).</li><li><code>to</code>: (optional): Represents the Parachain to which the assets will be transferred.</li><li><code>currencyFrom</code>: (required): Represents the asset being sent.</li><li><code>currencyTo</code>: (required): Represents the asset being received.</li><li><code>amount</code>: (required): Specifies the amount of assets to transfer.</li><li><code>slippagePct</code>: (required): Specifies the slipeage percentage.</li><li><code>recipientAddress</code>: (required): Specifies the address of the recipient.</li><li><code>injectorAddress</code>: (required): Specifies the address of the sender.</li><li><code>evmInjectorAddress</code>: (optional): Specifies the EVM address of the sender when sending from an EVM chain.</li></ul></li><li><p><strong>Errors</strong>:</p><ul><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;to&#39; is not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;to&#39; is not a valid Parachains</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;exchange&#39; is not valid exchange</li><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;from&#39; is not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;from&#39; is not a valid Parachains</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyTo&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyTo&#39; is not a valid currency</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyFrom&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyFrom&#39; is not a valid currency</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;amount&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;slippagePct&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;recipientAddress&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;recipientAddress&#39; is not a valid address</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;injectorAddress&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;injectorAddress&#39; is not a valid address</li><li><code>500</code> (Internal server error) - Returned when an unknown error has occurred. In this case please open an issue.</li></ul></li></ul><p><strong>Example of request:</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3001/v2/router&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        from: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Origin Parachain/Relay chain - OPTIONAL PARAMETER</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        exchange: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dex2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Exchange Parachain</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //Optional parameter, if not specified exchange will be auto-selected</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        to: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Destination Parachain/Relay chain - OPTIONAL PARAMETER</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        currencyFrom: {currencySpec}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to send - {symbol: &#39;ASTR&#39;})</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Currency to receive - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native(&#39;currencySymbol&#39;), amount: amount} | {symbol: Foreign(&#39;currencySymbol&#39;), amount: amount} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        currencyTo: {currencySpec}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to receive - {symbol: &#39;ASTR&#39;})</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Currency to receive - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native(&#39;currencySymbol&#39;), amount: amount} | {symbol: Foreign(&#39;currencySymbol&#39;), amount: amount} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        amount: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Amount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Amount to send</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        slippagePct: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Pct&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Max slipppage percentage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        recipientAddress: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Recipient address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        senderAddress: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;InjectorAddress&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Address of sender</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="manual-exchange-selection" tabindex="-1">Manual exchange selection <a class="header-anchor" href="#manual-exchange-selection" aria-label="Permalink to &quot;Manual exchange selection&quot;">​</a></h2><p>If you wish to select your exchange chain manually you can do that by providing aditional parameter <code>exchange:</code> in the call. Router will then use exchange chainn of your choice.</p><p><strong>Endpoint</strong>: <code>POST /v2/router-hash</code></p><ul><li><p><strong>Parameters</strong>:</p><ul><li><code>from</code>: (optional): Represents the Parachain from which the assets will be transferred.</li><li><code>exchange</code>: (optional): Represents the Parachain DEX on which tokens will be exchanged (If not provided, DEX is selected automatically based on best price output).</li><li><code>to</code>: (optional): Represents the Parachain to which the assets will be transferred.</li><li><code>currencyFrom</code>: (required): Represents the asset being sent.</li><li><code>currencyTo</code>: (required): Represents the asset being received.</li><li><code>amount</code>: (required): Specifies the amount of assets to transfer.</li><li><code>slippagePct</code>: (required): Specifies the slippage percentage.</li><li><code>recipientAddress</code>: (required): Specifies the address of the recipient.</li><li><code>injectorAddress</code>: (required): Specifies the address of the sender.</li><li><code>evmInjectorAddress</code>: (optional): Specifies the EVM address of the sender when sending from an EVM chain.</li></ul></li><li><p><strong>Errors</strong>:</p><ul><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;to&#39; is not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;to&#39; is not a valid Parachains</li><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;from&#39; is not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;from&#39; is not a valid Parachains</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;exchange&#39; is not valid exchange</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyTo&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyTo&#39; is not a valid currency</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyFrom&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyFrom&#39; is not a valid currency</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;amount&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;slippagePct&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;recipientAddress&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;recipientAddress&#39; is not a valid address</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;injectorAddress&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;injectorAddress&#39; is not a valid address</li><li><code>500</code> (Internal server error) - Returned when an unknown error has occurred. In this case please open an issue.</li></ul></li></ul><p><strong>Example of request:</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3001/v2/router&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        from: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Origin Parachain/Relay chain - OPTIONAL PARAMETER</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        exchange: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Exchange Parachain</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //Optional parameter, if not specified exchange will be auto-selected</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        to: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Destination Parachain/Relay chain - OPTIONAL PARAMETER</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        currencyFrom: {currencySpec}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to send - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native(&#39;currencySymbol&#39;), amount: amount} | {symbol: Foreign(&#39;currencySymbol&#39;), amount: amount} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        currencyTo: {currencySpec}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to receive - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native(&#39;currencySymbol&#39;), amount: amount} | {symbol: Foreign(&#39;currencySymbol&#39;), amount: amount} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        amount: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Amount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Amount to send</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        slippagePct: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Pct&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Max slipppage percentage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        recipientAddress: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Recipient address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        senderAddress: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;InjectorAddress&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Address of sender</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="best-amount-out" tabindex="-1">Best amount out <a class="header-anchor" href="#best-amount-out" aria-label="Permalink to &quot;Best amount out&quot;">​</a></h2><p>If you wish to find out what is the <code>best amount out</code> from specified dex or from any dex you can use following query.</p><p><strong>Endpoint</strong>: <code>POST /v2/router/best-amount-out</code></p><ul><li><p><strong>Parameters</strong>:</p><ul><li><code>from</code>: (optional): Represents the Parachain from which the assets will be transferred.</li><li><code>exchange</code>: (optional): Represents the Parachain DEX on which tokens will be exchanged (If not provided, DEX is selected automatically based on best price output).</li><li><code>to</code>: (required): Represents the Parachain to which the assets will be transferred.</li><li><code>currencyFrom</code>: (required): Represents the asset being sent.</li><li><code>currencyTo</code>: (required): Represents the asset being received.</li><li><code>amount</code>: (required): Specifies the amount of assets to transfer.</li></ul></li><li><p><strong>Errors</strong>:</p><ul><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;to&#39; is not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;to&#39; is not a valid Parachains</li><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;from&#39; is not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameters &#39;from&#39; is not a valid Parachains</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;exchange&#39; is not valid exchange</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyTo&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyTo&#39; is not a valid currency</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyFrom&#39; is expected but not provided</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;currencyFrom&#39; is not a valid currency</li><li><code>400</code> (Bad request exception) - Returned when query parameter &#39;amount&#39; is expected but not provided</li><li><code>500</code> (Internal server error) - Returned when an unknown error has occurred. In this case please open an issue.</li></ul></li></ul><p><strong>Example of request:</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3001/v2/router/best-amount-out&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        from: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Origin Parachain/Relay chain - OPTIONAL PARAMETER</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        exchange: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Exchange Parachain/Relay chain</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //Optional parameter, if not specified exchange will be auto-selected</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        to: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Destination Parachain/Relay chain - OPTIONAL PARAMETER</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        currencyFrom: {currencySpec}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to send - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native(&#39;currencySymbol&#39;), amount: amount} | {symbol: Foreign(&#39;currencySymbol&#39;), amount: amount} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        currencyTo: {currencySpec}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to receive - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native(&#39;currencySymbol&#39;), amount: amount} | {symbol: Foreign(&#39;currencySymbol&#39;), amount: amount} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        amount: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Amount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Amount to send</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,30)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
