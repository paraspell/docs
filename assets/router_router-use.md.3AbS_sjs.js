import{_ as a,c as i,ae as t,o as n}from"./chunks/framework.DRPMfuGp.js";const c=JSON.parse('{"title":"Ready to make cross-chain swap messages with ease? ü§ù","description":"","frontmatter":{},"headers":[],"relativePath":"router/router-use.md","filePath":"router/router-use.md"}'),e={name:"router/router-use.md"};function l(h,s,r,p,o,k){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="ready-to-make-cross-chain-swap-messages-with-ease-ü§ù" tabindex="-1">Ready to make cross-chain swap messages with ease? ü§ù <a class="header-anchor" href="#ready-to-make-cross-chain-swap-messages-with-ease-ü§ù" aria-label="Permalink to &quot;Ready to make cross-chain swap messages with ease? ü§ù&quot;">‚Äã</a></h1><p>XCM Router can perform cross-chain transactions between Polkadot/Kusama Parachains and Relay chains as well. It works across 10 open-source Parachain DEXes.</p><p><strong>These are:</strong></p><ul><li>Acala / 36 Pools available</li><li>Basilisk / 15 Pools available</li><li>BifrostKusama / 66 Pools available / Requires native token for swaps</li><li>BifrostPolkadot / 45 Pools available / Requires native token for swaps</li><li>HydraDX / 210 Pools available</li><li>Interlay / 10 Pools available / Requires native token for swaps</li><li>Karura / 136 Pools available</li><li>Kintsugi / 6 Pools available / Requires native token for swaps</li><li>AssetHubPolkadot / 32 Pools available / Requires specific native tokens for swaps</li><li>AssetHubKusama / 16 Pools available / Requires specific native tokens for swaps</li></ul><p>Totalling to 572 pools available for cross-chain swap transactions.</p><p><strong>NOTE: Some exchanges require native tokens to proceed with swaps.</strong></p><h2 id="automatic-exchange-selection" tabindex="-1">Automatic exchange selection <a class="header-anchor" href="#automatic-exchange-selection" aria-label="Permalink to &quot;Automatic exchange selection&quot;">‚Äã</a></h2><p>If you wish to have an exchange chain selection based on the best price outcome, you can opt for the automatic exchange selection method. This method can be selected by <strong>not using</strong> <code>.exchange()</code> parameter in the call. The router will then automatically select the best exchange chain for you based on the best price outcome.</p><h3 id="builder-pattern" tabindex="-1">Builder pattern <a class="header-anchor" href="#builder-pattern" aria-label="Permalink to &quot;Builder pattern&quot;">‚Äã</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RouterBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Polkadot&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Origin Parachain/Relay chain - OPTIONAL PARAMETER</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Astar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Destination Parachain/Relay chain - OPTIONAL PARAMETER</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currencyFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({symbol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to send - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native(&#39;currencySymbol&#39;), amount: amount} | {symbol: Foreign(&#39;currencySymbol&#39;), amount: amount} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount} </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currencyTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({symbol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ASTR&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to receive - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native(&#39;currencySymbol&#39;), amount: amount} | {symbol: Foreign(&#39;currencySymbol&#39;), amount: amount} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1000000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Amount to send</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slippagePct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Max slipppage percentage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">senderAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selectedAccount.address)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Injector address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">recipientAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(recipientAddress) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Recipient address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(injector.signer)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Signer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //.evmSenderAddress(evmInjector address)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //Optional parameters when origin node is EVM based (Required with evmSigner)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //.evmSigner(EVM signer)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     //Optional parameters when origin node is EVM based (Required with evmInjectorAddress)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onStatusChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TTxProgressInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//This is how we subscribe to calls that need signing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(status.hashes);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Transaction hashes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(status.status);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Transaction statuses</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(status.type);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Transaction types</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buildAndSend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>AccountId32 and AccountKey20 addresses can be directly copied from PolkadotJS as our SDK has a handler to convert it into the desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftn7U</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9b2b</code></p><h2 id="manual-exchange-selection" tabindex="-1">Manual exchange selection <a class="header-anchor" href="#manual-exchange-selection" aria-label="Permalink to &quot;Manual exchange selection&quot;">‚Äã</a></h2><p>If you wish to select your exchange chain manually you can do that by providing additional parameter <code>.exchange()</code> in the call. The router will then use the exchange chain of your choice.</p><h3 id="builder-pattern-1" tabindex="-1">Builder pattern <a class="header-anchor" href="#builder-pattern-1" aria-label="Permalink to &quot;Builder pattern&quot;">‚Äã</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RouterBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Polkadot&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Origin Parachain/Relay chain - OPTIONAL PARAMETER</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HydraDxDex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Exchange Parachain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Astar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Destination Parachain/Relay chain - OPTIONAL PARAMETER</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currencyFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({symbol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to send - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native(&#39;currencySymbol&#39;), amount: amount} | {symbol: Foreign(&#39;currencySymbol&#39;), amount: amount} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount} </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currencyTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({symbol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ASTR&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Currency to receive - {id: currencyID, amount: amount} | {symbol: currencySymbol, amount: amount} | {symbol: Native(&#39;currencySymbol&#39;), amount: amount} | {symbol: Foreign(&#39;currencySymbol&#39;), amount: amount} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;), amount: amount} | {multilocation: AssetMultilocationString, amount: amount | AssetMultilocationJson, amount: amount}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1000000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Amount to send</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slippagePct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Max slipppage percentage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">senderAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selectedAccount.address)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Injector address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">recipientAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(recipientAddress) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Recipient address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(injector.signer)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Signer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //.evmSenderAddress(evmInjector address)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //Optional parameters when origin node is EVM based (Required with evmSigner)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //.evmSigner(EVM signer)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     //Optional parameters when origin node is EVM based (Required with evmInjectorAddress)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onStatusChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TTxProgressInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//This is how we subscribe to calls that need signing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(status.hashes);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Transaction hashes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(status.status);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Transaction statuses</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(status.type);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Transaction types</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buildAndSend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>AccountId32 and AccountKey20 addresses can be directly copied from PolkadotJS as our SDK has a handler to convert it into the desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftn7U</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9b2b</code></p><h2 id="get-amount-out-for-your-currency-pair" tabindex="-1">Get amount out for your currency pair <a class="header-anchor" href="#get-amount-out-for-your-currency-pair" aria-label="Permalink to &quot;Get amount out for your currency pair&quot;">‚Äã</a></h2><p>To retrieve exchange amount, that you receive for your desired asset pair you can use following function. This function returns 2 parameters. Name of best fitting DEX (Automatic selection - can be further used for manual selection) and Amount out</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const result = await RouterBuilder()</span></span>
<span class="line"><span>      .from(&#39;Astar&#39;) //Optional parameter</span></span>
<span class="line"><span>      .to(&#39;Acala&#39;) //Optional parameter</span></span>
<span class="line"><span>      .exchange(&#39;Hydration&#39;) //Optional parameter</span></span>
<span class="line"><span>      .currencyFrom({ symbol: &#39;ASTR&#39; }) </span></span>
<span class="line"><span>      .currencyTo({ symbol: &#39;DOT&#39; })</span></span>
<span class="line"><span>      .amount(10000000000n)</span></span>
<span class="line"><span>      .getBestAmountOut();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(result.amountOut)</span></span>
<span class="line"><span>console.log(result.exchange)</span></span></code></pre></div><h2 id="ready-to-use-in-spellrouter" tabindex="-1">Ready to use in SpellRouter <a class="header-anchor" href="#ready-to-use-in-spellrouter" aria-label="Permalink to &quot;Ready to use in SpellRouter&quot;">‚Äã</a></h2><table tabindex="0"><thead><tr><th>DEX</th><th>Can send to/receive from</th><th>Supported assets</th><th>Notes</th></tr></thead><tbody><tr><td>Acala DEX</td><td>Polkadot Relay, Astar, HydraDX, Interlay, Moonbeam, Parallel, AssetHubPolkadot, Unique network</td><td>ACA, DOT, aSEED, USDCet, UNQ, IBTC, INTR, lcDOT, LDOT</td><td>Fees are paid by either ACA or DOT</td></tr><tr><td>Karura DEX</td><td>Kusama Relay, Altair, Basilisk, BifrostKusama, Calamari, Crab, Parallel Heiko, Kintsugi, Moonriver, Quartz, Crust Shadow, Shiden, AssetHubKusama</td><td>BNC, USDCet, RMRK, ARIS, AIR, QTZ, CSM, USDT, KAR, KBTC, KINT, KSM, aSEED, LKSM, PHA, tKSM, TAI</td><td>Fees are paid by either KAR or KSM</td></tr><tr><td>Hydration DEX</td><td>Polkadot Relay, Acala, Interlay, AssetHubPolkadot, Zeitgeist, Astar, Centrifuge, BifrostPolkadot, Mythos</td><td>USDT, MYTH, HDX, WETH, GLMR, IBTC, BNC, WBTC, vDOT, DAI, CFG, DOT, DAI, ZTG, WBTC, INTR, ASTR, LRNA, USDC</td><td>Chain automatically gives you native asset to pay for fees.</td></tr><tr><td>Basilisk DEX</td><td>Kusama Relay, Karura, AssetHubKusama, Tinkernet, Robonomics</td><td>BSX, USDT, aSEED, XRT, KSM, TNKR</td><td>Chain automatically gives you native asset to pay for fees.</td></tr><tr><td>Bifrost Kusama DEX</td><td>Kusama Relay, AssetHubKusama, Karura, Moonriver, Kintsugi</td><td>BNC, vBNC, vsKSM, vKSM, USDT, aSEED, KAR, ZLK, RMRK, KBTC, MOVR, vMOVR</td><td>Chain requires native BNC asset for fees.</td></tr><tr><td>Bifrost Polkadot DEX</td><td>Polkadot Relay, AssetHubPolkadot, Moonbeam, Astar, Interlay</td><td>BNC, vDOT, vsDOT, USDT, FIL, vFIL, ASTR, vASTR, GLMR, vGLMR, MANTA, vMANTA</td><td>Chain requires native BNC asset for fees.</td></tr><tr><td>Interlay DEX</td><td>Polkadot Relay, Acala, Astar, Parallel, PolkadotAssetHub, HydraDX, BifrostPolkadot</td><td>INTR, DOT, IBTC, USDT, VDOT</td><td>Chain requires native INTR asset for fees.</td></tr><tr><td>Kintsugi DEX</td><td>Kusama Relay, Karura, KusamaAssetHub, Parallel Heiko, BifrostKusama</td><td>KINT,KSM,KBTC,USDT</td><td>Chain requires native KINT asset for fees.</td></tr><tr><td>AssetHubPolkadot</td><td>Polkadot Relay, Any Parachain it has HRMP channel with</td><td>DOT, WETH.e, USDC, USDT, LAOS, MYTH, WBBTC.e, ASX, BILL, DEMO, TATE, PINK, MODE, MVPW, PIGS, DED, wstETH.e, TTT, KSM, tBTC.e, PEPE.e, SHIB.e, TON.e, NAT, NT2, DOTA, STINK, MTC, AJUN, GGI, GLMR, NIN</td><td>Requires specific native tokens for swaps</td></tr><tr><td>AssetHubKusama</td><td>Kusama Relay, Any Parachain it has HRMP channel with</td><td>KSM, DOT, USDC, USDT, BILLCOIN, WOOD, dUSD, TACP, TSM, MA42, USDT, DMO, JAM</td><td>Requires specific native tokens for swaps</td></tr></tbody></table>`,23)]))}const E=a(e,[["render",l]]);export{c as __pageData,E as default};
