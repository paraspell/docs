import{_ as e,c as s,o as t,d as a}from"./app.3eed6c45.js";const g=JSON.parse('{"title":"Deploy API on your server 💻","description":"","frontmatter":{},"headers":[{"level":3,"title":"NOTE BEFORE DEPLOYING: Database must be specifically POSTGRESQL","slug":"note-before-deploying-database-must-be-specifically-postgresql","link":"#note-before-deploying-database-must-be-specifically-postgresql","children":[]},{"level":3,"title":"How to trigger sentry error","slug":"how-to-trigger-sentry-error","link":"#how-to-trigger-sentry-error","children":[]}],"relativePath":"api/deploy.md"}'),o={name:"api/deploy.md"},r=a(`<h1 id="deploy-api-on-your-server-💻" tabindex="-1">Deploy API on your server 💻 <a class="header-anchor" href="#deploy-api-on-your-server-💻" aria-hidden="true">#</a></h1><p>To deploy our API on your server you only need to create a <code>.env</code> file and fill it with your secret phrase to allow for token autentification. This file should be located in the root folder. You can also set request limits in that file.</p><p>The example file should look like this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">RATE_LIMIT_TTL_SEC=60 </span></span>
<span class="line"><span style="color:#A6ACCD;">RATE_LIMIT_REQ_COUNT_PUBLIC=20</span></span>
<span class="line"><span style="color:#A6ACCD;">RATE_LIMIT_REQ_COUNT_AUTH=100</span></span>
<span class="line"><span style="color:#A6ACCD;">JWT_SECRET_KEY=YourSecretPhrase</span></span>
<span class="line"><span style="color:#A6ACCD;">RECAPTCHA_SECRET_KEY=YourRecaptchaSecretKey</span></span>
<span class="line"><span style="color:#A6ACCD;">PORT=YourHTTPServerPort</span></span>
<span class="line"><span style="color:#A6ACCD;">DB_HOST=localhost</span></span>
<span class="line"><span style="color:#A6ACCD;">DB_PORT=5432</span></span>
<span class="line"><span style="color:#A6ACCD;">DB_USER=YourUser</span></span>
<span class="line"><span style="color:#A6ACCD;">DB_PASS=YourPassword</span></span>
<span class="line"><span style="color:#A6ACCD;">DB_NAME=YourDBName</span></span>
<span class="line"><span style="color:#A6ACCD;">EMAIL_ADDRESS_SENDER=sender@gmail.com</span></span>
<span class="line"><span style="color:#A6ACCD;">EMAIL_ADDRESS_RECIPIENT_ARR=admin1@gmail.com,admin2@gmail.com</span></span>
<span class="line"><span style="color:#A6ACCD;">EMAIL_CLIENT_ID=YourClientId</span></span>
<span class="line"><span style="color:#A6ACCD;">EMAIL_CLIENT_SECRET=YourClientSecret</span></span>
<span class="line"><span style="color:#A6ACCD;">EMAIL_REDIRECT_URI=YourRedirectUri</span></span>
<span class="line"><span style="color:#A6ACCD;">EMAIL_REFRESH_TOKEN=YourClientRefreshToken</span></span>
<span class="line"><span style="color:#A6ACCD;">MIXPANEL_PROJECT_TOKEN=YourMixPanelToken</span></span>
<span class="line"><span style="color:#A6ACCD;">SENTRY_DSN=YourSentryToken</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>What each line in the file means (every line must be configured otherwise API won&#39;t start):</p><ul><li><code>RATE_LIMIT_TTL_SEC</code>: Line specifies how much time is allowed to pass before the request counter is reset.</li><li><code>RATE_LIMIT_REQ_COUNT_PUBLIC</code>: Line specifies users without token authentification and how many requests they are allowed to do per specified time.</li><li><code>RATE_LIMIT_REQ_COUNT_AUTH</code>: Line specifies users with token authentification and how many requests they are allowed to do per specified time.</li><li><code>JWT_SECRET_KEY</code>: Key, that has to be set before the server is launched. Secret from which all tokens are hash-derived.</li><li><code>RECAPTCHA_SECRET_KEY</code>: Secret key for your ReCaptcha. A guide on how it can be obtained can be found <a href="https://cloud.google.com/recaptcha-enterprise/docs/create-key?fbclid=IwAR0wbzgUfKo-ih12jfNAC8MJIUUEMX15vszzfMdwvizXgqBdcrQW_9nCtx4" target="_blank" rel="noreferrer">here</a>. <strong>Make sure to select reCAPTCHA v2 when generating new key.</strong></li><li><code>PORT</code>: Specifies the port on which the API server will be running. <strong>This parameter is optional and if now added API will default to port 3001</strong></li><li><code>DB_HOST</code>: Specifies host for your Postgresql database.</li><li><code>DB_PORT</code>: Specifies the port for your Postgresql database.</li><li><code>DB_USER</code>: Specifies database superuser username.</li><li><code>DB_PASS</code>: Specifies database superuser password.</li><li><code>DB_NAME</code>: Specifies your Postgresql database name.</li><li><code>EMAIL_ADDRESS_SENDER</code>: Specifies the email address that will send responses to filled forms.</li><li><code>EMAIL_ADDRESS_RECIPIENT_ARR</code>: Specifies the email address that will receive responses from filled forms. There can be multiple emails set and you can observe in the example above how to insert them.</li><li><code>EMAIL_CLIENT_ID</code>: These are required for nodemailer find out more in this <a href="https://dev.to/chandrapantachhetri/sending-emails-securely-using-node-js-nodemailer-smtp-gmail-and-oauth2-g3a" target="_blank" rel="noreferrer">tutorial</a>.</li><li><code>EMAIL_CLIENT_SECRET</code>: These are required for nodemailer find out more in this <a href="https://dev.to/chandrapantachhetri/sending-emails-securely-using-node-js-nodemailer-smtp-gmail-and-oauth2-g3a" target="_blank" rel="noreferrer">tutorial</a>.</li><li><code>EMAIL_REDIRECT_URI</code>: These are required for nodemailer find out more in this <a href="https://dev.to/chandrapantachhetri/sending-emails-securely-using-node-js-nodemailer-smtp-gmail-and-oauth2-g3a" target="_blank" rel="noreferrer">tutorial</a>.</li><li><code>EMAIL_REFRESH_TOKEN</code>: These are required for nodemailer find out more in this <a href="https://dev.to/chandrapantachhetri/sending-emails-securely-using-node-js-nodemailer-smtp-gmail-and-oauth2-g3a" target="_blank" rel="noreferrer">tutorial</a>.</li><li><code>MIXPANEL_PROJECT_TOKEN</code>: This token is for statistics that track requests (Not saving amounts and wallet addresses to keep the privacy of users intact). <strong>This parameter is optional</strong>.</li><li><code>SENTRY_DSN</code>: This token is for sentry - statistics tool that tracks errors produced by API to create easier debugging for developers. <strong>This parameter is optional</strong>.</li></ul><p>More on this feature can be found in the following <a href="https://github.com/paraspell/xcm-api/pull/14" target="_blank" rel="noreferrer">Pull request</a></p><h3 id="note-before-deploying-database-must-be-specifically-postgresql" tabindex="-1">NOTE BEFORE DEPLOYING: Database must be specifically POSTGRESQL <a class="header-anchor" href="#note-before-deploying-database-must-be-specifically-postgresql" aria-hidden="true">#</a></h3><p><strong>Make sure to also test every form before deploying to ensure everything is configured correctly.</strong></p><p>If we configured everything correctly we should receive emails similar to the one showcased below. These should be received at email addresses we specified in the <code>EMAIL_ADDRESS_RECIPIENT_ARR</code> configuration line. <img width="784" alt="Screenshot 2023-08-21 at 22 40 34" src="https://user-images.githubusercontent.com/55763425/262149103-cb3398c0-b186-452f-bb67-b8aac9608173.png"></p><p>Based on the UserID received in the email we can edit the maximum request amount for specific API key. <strong>NOTE: Database overrides maximum request count</strong>. If the value is left on <code>null</code> the user can generate a default of 100 requests per minute just like before as Captcha verified user. <img width="437" alt="Screenshot 2023-08-21 at 21 58 57" src="https://user-images.githubusercontent.com/55763425/262140588-8353a1a5-e4be-4be7-92bd-a37cfe26ca39.png"></p><h1 id="setting-up-sentry" tabindex="-1">Setting up sentry <a class="header-anchor" href="#setting-up-sentry" aria-hidden="true">#</a></h1><p>Recently LightSpell introducet sentry error tracking service implementation. This guide covers how to use it.</p><ul><li>First step is to register at this <a href="https://paraspell.sentry.io/" target="_blank" rel="noreferrer">website</a>.</li><li>Create new project to get DSN token for .env file used by LightSpell <img width="420" alt="Screenshot 2023-11-16 at 10 23 28" src="https://user-images.githubusercontent.com/55763425/283396658-98339f19-04ab-4ee8-9dfa-a0efec722e73.png"></li><li>Monitor your issues through dashboard, if you receive any unhandled issues you should be notified by email also</li></ul><h3 id="how-to-trigger-sentry-error" tabindex="-1">How to trigger sentry error <a class="header-anchor" href="#how-to-trigger-sentry-error" aria-hidden="true">#</a></h3><p>Open your rest API client, client we use is <a href="https://insomnia.rest/" target="_blank" rel="noreferrer">Insomnia</a>.</p><p>Paste in following details and input following link to test out sentry: <code>http://localhost:3001/sentry-test</code></p><p>LightSpell have integrated this test for you so you can test out error 500 in localhost mode. Once you pasted the link into browser sentry should notify you about new error 500. It should look like this in your project:</p><img width="1223" alt="Snímka obrazovky 2024-03-08 o 19 16 35" src="https://gist.github.com/assets/55763425/c342e184-a7df-4a58-ad70-9d08fd7c59ff"><p>You can see, that exact line of where error was triggered is shown and you can even try to ask AI for help with resolving the task for you.</p><p>This confirms, that the sentry is working correctly.</p>`,21),n=[r];function i(l,c,p,d,h,u){return t(),s("div",null,n)}const y=e(o,[["render",i]]);export{g as __pageData,y as default};
