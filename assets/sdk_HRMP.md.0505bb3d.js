import{_ as n,c as s,o as a,d as e}from"./app.38caa334.js";const C=JSON.parse('{"title":"Create channels between Parachains üåê","description":"","frontmatter":{},"headers":[{"level":3,"title":"SDK allows you to:","slug":"sdk-allows-you-to","link":"#sdk-allows-you-to","children":[]},{"level":3,"title":"Video guide for this section:","slug":"video-guide-for-this-section","link":"#video-guide-for-this-section","children":[]},{"level":2,"title":"Open HRMP channel","slug":"open-hrmp-channel","link":"#open-hrmp-channel","children":[{"level":3,"title":"Builder pattern","slug":"builder-pattern","link":"#builder-pattern","children":[]},{"level":3,"title":"Function pattern","slug":"function-pattern","link":"#function-pattern","children":[]}]},{"level":2,"title":"Close HRMP channel","slug":"close-hrmp-channel","link":"#close-hrmp-channel","children":[{"level":3,"title":"Builder pattern","slug":"builder-pattern-1","link":"#builder-pattern-1","children":[]},{"level":3,"title":"Function pattern","slug":"function-pattern-1","link":"#function-pattern-1","children":[]}]},{"level":2,"title":"Developer experience","slug":"developer-experience","link":"#developer-experience","children":[{"level":3,"title":"Builder pattern experience","slug":"builder-pattern-experience","link":"#builder-pattern-experience","children":[]}]}],"relativePath":"sdk/HRMP.md"}'),l={name:"sdk/HRMP.md"},o=e(`<h1 id="create-channels-between-parachains-üåê" tabindex="-1">Create channels between Parachains üåê <a class="header-anchor" href="#create-channels-between-parachains-üåê" aria-hidden="true">#</a></h1><h3 id="sdk-allows-you-to" tabindex="-1">SDK allows you to: <a class="header-anchor" href="#sdk-allows-you-to" aria-hidden="true">#</a></h3><ul><li>Open HRMP channels between Parachains</li><li>Close HRMP channels between Parachains</li></ul><p><em>(This pallet only works on Locally launched network. These functions require sudo access)</em></p><h3 id="video-guide-for-this-section" tabindex="-1">Video guide for this section: <a class="header-anchor" href="#video-guide-for-this-section" aria-hidden="true">#</a></h3><p><a href="https://youtu.be/8iXQZhyNrPM" target="_blank" rel="noreferrer"><img src="https://user-images.githubusercontent.com/55763425/238154733-cef698ac-f00f-4e74-8c4f-1e0d7cfe4059.png" alt="hrmpPallets"></a></p><h2 id="open-hrmp-channel" tabindex="-1">Open HRMP channel <a class="header-anchor" href="#open-hrmp-channel" aria-hidden="true">#</a></h2><p>When opening a new channel the operation has to be specified by providing <code>origin</code> &amp; <code>destination</code> Parachains, calling the <code>openChannel()</code> method and then providing <code>maxSize</code> and <code>maxMessageSize</code> parameters.</p><h3 id="builder-pattern" tabindex="-1">Builder pattern <a class="header-anchor" href="#builder-pattern" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Builder</span><span style="color:#A6ACCD;">(api)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Karura</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)               </span><span style="color:#676E95;font-style:italic;">// Origin Parachain</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Pichiu</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)                 </span><span style="color:#676E95;font-style:italic;">// Destination Parachain</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">openChannel</span><span style="color:#A6ACCD;">()                </span><span style="color:#676E95;font-style:italic;">// Call to open channel</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">maxSize</span><span style="color:#A6ACCD;">(maxSize)             </span><span style="color:#676E95;font-style:italic;">// Max size</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">maxMessageSize</span><span style="color:#A6ACCD;">(maxMsgSize)   </span><span style="color:#676E95;font-style:italic;">// Max message size</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h3 id="function-pattern" tabindex="-1">Function pattern <a class="header-anchor" href="#function-pattern" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">paraspell</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">openChannels</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">openChannel</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        api</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        origin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">             </span><span style="color:#676E95;font-style:italic;">// Origin Parachain</span></span>
<span class="line"><span style="color:#A6ACCD;">        destination</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// Destination Parachain</span></span>
<span class="line"><span style="color:#A6ACCD;">        maxSize</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// Max size</span></span>
<span class="line"><span style="color:#A6ACCD;">        maxMessageSize      </span><span style="color:#676E95;font-style:italic;">// Max message size</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="close-hrmp-channel" tabindex="-1">Close HRMP channel <a class="header-anchor" href="#close-hrmp-channel" aria-hidden="true">#</a></h2><p>When closing channels the operation has to be specified by providing the <code>origin</code> Parachain, calling the <code>closeChannel()</code> method and then providing <code>inbound</code> and <code>outbound</code> parameters.</p><h3 id="builder-pattern-1" tabindex="-1">Builder pattern <a class="header-anchor" href="#builder-pattern-1" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Builder</span><span style="color:#A6ACCD;">(api)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Karura</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)          </span><span style="color:#676E95;font-style:italic;">//Origin Parachain</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">closeChannel</span><span style="color:#A6ACCD;">()          </span><span style="color:#676E95;font-style:italic;">//Call to close channels</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inbound</span><span style="color:#A6ACCD;">(inbound)        </span><span style="color:#676E95;font-style:italic;">//Inbound</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">outbound</span><span style="color:#A6ACCD;">(outbound)      </span><span style="color:#676E95;font-style:italic;">//Outbound</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h3 id="function-pattern-1" tabindex="-1">Function pattern <a class="header-anchor" href="#function-pattern-1" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">paraspell</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">closeChannels</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">closeChannel</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        api</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">              </span></span>
<span class="line"><span style="color:#A6ACCD;">        origin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// Origin Parachain </span></span>
<span class="line"><span style="color:#A6ACCD;">        inbound</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">           </span><span style="color:#676E95;font-style:italic;">// Inbound</span></span>
<span class="line"><span style="color:#A6ACCD;">        outbound           </span><span style="color:#676E95;font-style:italic;">// Outbound</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="developer-experience" tabindex="-1">Developer experience <a class="header-anchor" href="#developer-experience" aria-hidden="true">#</a></h2><h3 id="builder-pattern-experience" tabindex="-1">Builder pattern experience <a class="header-anchor" href="#builder-pattern-experience" aria-hidden="true">#</a></h3><p>When developing with the Builder pattern, the developer is guided by the typescript and thus knows which parameter can be added next. This increases the developer experience and makes SDK easier to use. <img width="459" alt="builder" src="https://user-images.githubusercontent.com/55763425/214562882-dd1a052e-c420-4131-bb50-3b656fabd10c.png"></p>`,21),p=[o];function t(c,r,i,d,h,y){return a(),s("div",null,p)}const D=n(l,[["render",t]]);export{C as __pageData,D as default};
