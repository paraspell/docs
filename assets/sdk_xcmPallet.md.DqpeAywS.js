import{_ as i,c as a,ae as n,o as t}from"./chunks/framework.DRPMfuGp.js";const E=JSON.parse('{"title":"Send XCM messages across Paraverse ü™ê","description":"","frontmatter":{},"headers":[],"relativePath":"sdk/xcmPallet.md","filePath":"sdk/xcmPallet.md"}'),e={name:"sdk/xcmPallet.md"};function l(h,s,k,p,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="send-xcm-messages-across-paraverse-ü™ê" tabindex="-1">Send XCM messages across Paraverse ü™ê <a class="header-anchor" href="#send-xcm-messages-across-paraverse-ü™ê" aria-label="Permalink to &quot;Send XCM messages across Paraverse ü™ê&quot;">‚Äã</a></h1><h3 id="you-can-use-our-sdk-in-all-three-scenarios" tabindex="-1">You can use our SDK in all three scenarios: <a class="header-anchor" href="#you-can-use-our-sdk-in-all-three-scenarios" aria-label="Permalink to &quot;You can use our SDK in all three scenarios:&quot;">‚Äã</a></h3><ul><li>Relay chain to Parachain XCM transfer</li><li>Parachain to Relay chain XCM transfer</li><li>Parachain to Parachain XCM transfer</li></ul><h2 id="relay-chain-to-parachain" tabindex="-1">Relay chain to Parachain <a class="header-anchor" href="#relay-chain-to-parachain" aria-label="Permalink to &quot;Relay chain to Parachain&quot;">‚Äã</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*node api/ws_url_string - optional*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Api parameter is optional and can also be ws_url_string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RELAY_NODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Kusama or Polkadot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*,customParaId - optional*/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Multilocation object)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Destination Parachain</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //You can now add custom ParachainID eg. .to(&#39;Basilisk&#39;, 2024) or use custom Multilocation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({symbol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, amount: amount}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Or KSM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Multilocation object) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AccountId32 or AccountKey20 address or custom Multilocation</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      .xcmVersion(Version.V1/V2/V3/V4)  //Optional parameter for manual override of XCM Version used in call</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      .customPallet(&#39;Pallet&#39;,&#39;pallet_function&#39;) //Optional parameter for manual override of XCM Pallet and function used in call (If they are named differently on some node but syntax stays the same). Both pallet name and function required. Pallet name must be CamelCase, function name snake_case.*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Function called to build call</span></span></code></pre></div><p>AccountId32 and AccountKey20 addresses can be directly copied from PolkadotJS as our SDK has a handler to convert it into the desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftnAA</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9bAA</code></p><h2 id="parachain-to-relay-chain" tabindex="-1">Parachain to Relay chain <a class="header-anchor" href="#parachain-to-relay-chain" aria-label="Permalink to &quot;Parachain to Relay chain&quot;">‚Äã</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*node api/ws_url_string - optional*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Api parameter is optional and can also be ws_url_string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Origin Parachain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RELAY_NODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Kusama or Polkadot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({symbol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, amount: amount}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Or KSM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Multilocation object) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AccountId32 address or custom Multilocation</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*.xcmVersion(Version.V1/V2/V3/V4)  //Optional parameter for manual override of XCM Version used in call</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      .customPallet(&#39;Pallet&#39;,&#39;pallet_function&#39;) //Optional parameter for manual override of XCM Pallet and function used in call (If they are named differently on some node but syntax stays the same). Both pallet name and function required. Pallet name must be CamelCase, function name snake_case.*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Function called to build call</span></span></code></pre></div><p>AccountId32 and AccountKey20 addresses can be directly copied from PolkadotJS as our SDK has a handler to convert it into the desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftnAA</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9bAA</code></p><h2 id="parachain-to-parachain" tabindex="-1">Parachain to Parachain <a class="header-anchor" href="#parachain-to-parachain" aria-label="Permalink to &quot;Parachain to Parachain&quot;">‚Äã</a></h2><p><strong>NOTE</strong> If you wish to transfer from Parachain that uses long IDs for example Moonbeam you have to add character &#39;n&#39; the end of currencyID. Eg: <code>.currency(42259045809535163221576417993425387648n)</code> will mean you transfer xcDOT.</p><h3 id="builder-pattern" tabindex="-1">Builder pattern <a class="header-anchor" href="#builder-pattern" aria-label="Permalink to &quot;Builder pattern&quot;">‚Äã</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*node api/ws_url_string - optional*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Api parameter is optional and can also be ws_url_string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Origin Parachain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*,customParaId - optional*/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Multilocation object </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*Only works for PolkadotXCM pallet*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Destination Parachain</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //You can now add custom ParachainID eg. .to(&#39;Basilisk&#39;, 2024) or use custom Multilocation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({id: currencyID, amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {symbol: currencySymbol, amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {symbol: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Native</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;currencySymbol&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {symbol: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foreign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;currencySymbol&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {symbol: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ForeignAbstract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;currencySymbol&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {multilocation: AssetMultilocationString, amount: amount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AssetMultilocationJson, amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {multilocation: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Override</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Custom Multilocation&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {multiasset: {currencySelection </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* for example symbol: symbol or id: id, or multilocation: multilocation */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , amount: amount}, {currencySelection </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* for example symbol: symbol or id: id, or multilocation: multilocation */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: amount}, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Multilocation object </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*If you are sending through xTokens, you need to pass the destination and address multilocation in one object (x2)*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*senderAddress - OPTIONAL - used when origin is AssetHub and feeAsset parameter is provided*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AccountId32 or AccountKey20 address or custom Multilocation</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*.feeAsset({symbol: &#39;symbol&#39;} || {id: &#39;id&#39;} || {multilocation: &#39;multilocation&#39;}) // Optional parameter used when multiasset is provided or when origin is AssetHub - so user can pay in fees different than DOT</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      .xcmVersion(Version.V1/V2/V3/V4)  //Optional parameter for manual override of XCM Version used in call</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      .customPallet(&#39;Pallet&#39;,&#39;pallet_function&#39;) //Optional parameter for manual override of XCM Pallet and function used in call (If they are named differently on some node but syntax stays the same). Both pallet name and function required. Pallet name must be CamelCase, function name snake_case.*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Function called to build call</span></span></code></pre></div><p>AccountId32 and AccountKey20 addresses can be directly copied from PolkadotJS as our SDK has a handler to convert it into the desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftnAA</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9bAA</code></p><h2 id="ecosystem-bridges" tabindex="-1">Ecosystem Bridges <a class="header-anchor" href="#ecosystem-bridges" aria-label="Permalink to &quot;Ecosystem Bridges&quot;">‚Äã</a></h2><p>This section sums up currently available and implemented ecosystem bridges that are offered in the XCM SDK. Implementing cross-ecosystem asset transfers was never this easy!</p><h3 id="polkadot-kusama-bridge" tabindex="-1">Polkadot &lt;&gt; Kusama bridge <a class="header-anchor" href="#polkadot-kusama-bridge" aria-label="Permalink to &quot;Polkadot &lt;&gt; Kusama bridge&quot;">‚Äã</a></h3><p>Latest SDK versions support Polkadot &lt;&gt; Kusama bridge in very native and intuitive way. You just construct the Polkadot &lt;&gt; Kusama transfer as standard Parachain to Parachain scenario transfer.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(api)            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Api parameter is optional and can also be ws_url_string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AssetHubPolkadot&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Either AHP or AHK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AssetHubKusama&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Either AHP or AHK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({symbol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, amount: amount})        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Either KSM or DOT </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="polkadot-ethereum-bridge-snowbridge" tabindex="-1">Polkadot &lt;&gt; Ethereum bridge (Snowbridge) <a class="header-anchor" href="#polkadot-ethereum-bridge-snowbridge" aria-label="Permalink to &quot;Polkadot &lt;&gt; Ethereum bridge (Snowbridge)&quot;">‚Äã</a></h3><p>Just like Polkadot &lt;&gt; Kusama bridge the Snowbridge is implemented in as intuitive and native form as possible. The implementations for Polkadot -&gt; Ethereum and Ethereum -&gt; Polkadot differ due to different architecure so we will mention both scenarios.</p><h4 id="polkadot-ethereum-transfer" tabindex="-1">Polkadot -&gt; Ethereum transfer <a class="header-anchor" href="#polkadot-ethereum-transfer" aria-label="Permalink to &quot;Polkadot -&gt; Ethereum transfer&quot;">‚Äã</a></h4><p><strong>AssetHub</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(api)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AssetHubPolkadot&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ethereum&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)           </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({symbol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WETH&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, amount: amount})   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Any supported asset by bridge eg. WETH, WBTC, SHIB and more - {symbol: currencySymbol} | {id: currencyID}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(eth_address)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//AccountKey20 recipient address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>Other non-evm Parachains</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(api)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hydration&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Non-evm Parachain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ethereum&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)           </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({symbol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WETH&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, amount: amount})   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Any supported asset by bridge eg. WETH, WBTC, SHIB and more - {symbol: currencySymbol} | {id: currencyID}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(eth_address, sender_address)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//AccountKey20 recipient address + Injector SS58 address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>Other evm Parachains</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EvmBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(provider)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Moonbeam&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//EVM Parachain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ethereum&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)           </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({symbol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WETH&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, amount: amount})   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Any supported asset by bridge eg. WETH, WBTC, SHIB and more - {symbol: currencySymbol} | {id: currencyID}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(eth_address, sender_address)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//AccountKey20 recipient address + Asset hub address (Needs to be sender address)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="ethereum-polkadot-transfer" tabindex="-1">Ethereum -&gt; Polkadot transfer <a class="header-anchor" href="#ethereum-polkadot-transfer" aria-label="Permalink to &quot;Ethereum -&gt; Polkadot transfer&quot;">‚Äã</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> provider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ethers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BrowserProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.ethereum);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> signer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSigner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EvmBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(provider)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Ethereum provider</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ethereum&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AssetHubPolkadot&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({symbol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WETH&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, amount: amount})    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Any supported asset by bridge eg. WETH, WBTC, SHIB and more - {symbol: currencySymbol} | {id: currencyID}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address,ahAddress </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*optional*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//AccountID32 recipient address</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //ahAddress is optional and used in Moonbeam&gt;Ethereum transfer.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signer)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Ethereum signer address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><strong>Helper functions:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> depositToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signer: Signer, amount: bigint, symbol: string); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Deposit token to contract</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getTokenBalance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signer: Signer, symbol: string); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Get token balance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> approveToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signer: Signer, amount: bigint, symbol: string); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Approve token</span></span></code></pre></div><h2 id="dry-run-your-xcm-calls" tabindex="-1">Dry run your XCM Calls <a class="header-anchor" href="#dry-run-your-xcm-calls" aria-label="Permalink to &quot;Dry run your XCM Calls&quot;">‚Äã</a></h2><p>Dry running let&#39;s you check whether your XCM Call will execute, giving you a chance to fix it if it is constructed wrongly or you didn&#39;t select correct account/asset or don&#39;t have enough balance. It is constructed in same way as standard XCM messages with parameter <code>.dryRun()</code> instead of <code>.build()</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Builder pattern</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">API</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*optional*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({id: currencyID, amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {symbol: currencySymbol, amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {symbol: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Native</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;currencySymbol&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {symbol: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foreign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;currencySymbol&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {symbol: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ForeignAbstract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;currencySymbol&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {multilocation: AssetMultilocationString, amount: amount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AssetMultilocationJson, amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {multilocation: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Override</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Custom Multilocation&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {multiasset: {currencySelection, isFeeAsset?: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* for example symbol: symbol or id: id, or multilocation: multilocation*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, amount: amount}})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ADDRESS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dryRun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SENDER_ADDRESS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Function pattern</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDryRun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({Api, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*optional*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node, address </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*sender address*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tx </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Extrinsic object*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Check Parachain for DryRun support - returns true/false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { hasDryRunSupport } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@paraspell/sdk-pjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hasDryRunSupport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node)</span></span></code></pre></div><h2 id="batch-calls" tabindex="-1">Batch calls <a class="header-anchor" href="#batch-calls" aria-label="Permalink to &quot;Batch calls&quot;">‚Äã</a></h2><p>You can batch XCM calls and execute multiple XCM calls within one call. All three scenarios (Para-&gt;Para, Para-&gt;Relay, Relay-&gt;Para) can be used and combined.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*node api/ws_url_string - optional*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Ensure, that origin node is the same in all batched XCM Calls.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Any compatible Parachain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({currencySelection, amount}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Currency to transfer - options as in scenarios above</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Multilocation object)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addToBatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Ensure, that origin node is the same in all batched XCM Calls.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Any compatible Parachain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({currencySelection, amount}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Currency to transfer - options as in scenarios above</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Multilocation object)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addToBatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buildBatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // This settings object is optional and batch all is the default option</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          mode: BatchMode.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BATCH_ALL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //or BatchMode.BATCH</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span></code></pre></div><h2 id="moonbeam-xtokens-smart-contract" tabindex="-1">Moonbeam xTokens smart-contract <a class="header-anchor" href="#moonbeam-xtokens-smart-contract" aria-label="Permalink to &quot;Moonbeam xTokens smart-contract&quot;">‚Äã</a></h2><p>If you need to sign Moonbeam / Moonriver transactions with other than Polkadot wallets (eg. Metamask), you can interact with their smart contract to perform operations with other wallets. Both Ethers and Viem are supported.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EvmBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Moonbeam&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Moonbeam or Moonriver</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Parachain | Relay chain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(({id: currencyID, amount: amount} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {symbol: currencySymbol, amount: amount}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Select currency by ID or Symbol</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signer) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Ethers Signer or Viem Wallet Client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="query-existential-deposit" tabindex="-1">Query existential deposit <a class="header-anchor" href="#query-existential-deposit" aria-label="Permalink to &quot;Query existential deposit&quot;">‚Äã</a></h2><p>Latest SDK versions now offer ability to query existential deposit on implemented chains using simple call:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//PAPI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getExistentialDeposit } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@paraspell/sdk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//PJS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getExistentialDeposit } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@paraspell/sdk-pjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Currency is an optional parameter. If you wish to query native asset, currency parameter is not necessary.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Currency can be either {symbol: assetSymbol}, {id: assetId}, {multilocation: assetMultilocation}.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getExistentialDeposit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node, currency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="xcm-transfer-info" tabindex="-1">XCM Transfer info <a class="header-anchor" href="#xcm-transfer-info" aria-label="Permalink to &quot;XCM Transfer info&quot;">‚Äã</a></h2><p>You can now query all important information about your XCM call including information about fees (If your balance is sufficient to transfer XCM message) and more.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//PAPI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getTransferInfo, getBalanceForeign, getBalanceNative, getOriginFeeDetails, getMaxNativeTransferableAmount, getMaxForeignTransferableAmount, getTransferableAmount } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@paraspell/sdk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//PJS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getTransferInfo, getBalanceForeign, getBalanceNative, getOriginFeeDetails, getMaxNativeTransferableAmount, getMaxForeignTransferableAmount, getTransferableAmount } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@paraspell/sdk-pjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Get balance of foreign currency</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getBalanceForeign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({address, node, currency </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*- {id: currencyID} | {symbol: currencySymbol} | {symbol: Native(&#39;currencySymbol&#39;)} | {symbol: Foreign(&#39;currencySymbol&#39;)} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;)} | {multilocation: AssetMultilocationString | AssetMultilocationJson}*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, api </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* api/ws_url_string optional */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Get balance of native currency</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getBalanceNative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({address, node, api </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* api/ws_url_string optional */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Get fee information regarding XCM call</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getOriginFeeDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({from, to, currency </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*- {id: currencyID} | {symbol: currencySymbol} | {symbol: Native(&#39;currencySymbol&#39;)} | {symbol: Foreign(&#39;currencySymbol&#39;)} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;)} | {multilocation: AssetMultilocationString | AssetMultilocationJson}*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, amount, originAddress, destinationAddress, ahAddress </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* optional parameter when destination is Ethereum and origin is Parachain other than AssetHub*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, api </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* api/ws_url_string optional */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, feeMargin </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 10% by default */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Retrieves the asset balance for a given account on a specified node (You do not need to specify if it is native or foreign).</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAssetBalance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({address, node, currency </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*- {id: currencyID} | {symbol: currencySymbol} | {symbol: Native(&#39;currencySymbol&#39;)} | {symbol: Foreign(&#39;currencySymbol&#39;)} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;)} | {multilocation: AssetMultilocationString | AssetMultilocationJson}*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, api </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* api/ws_url_string optional */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Retrieves maximal transferable balance of chain&#39;s native asset (Balance-AssetED) (If a node has more native assets, the asset selection has to be provided. Otherwise the parameter is optional).</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getMaxNativeTransferableAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({address, node, currency </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*- {symbol: currencySymbol} */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Retrives maximal transferable balance of chain&#39;s foreign asset (Balance-AssetED)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getMaxForeignTransferableAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({address, node, currency </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*- {id: currencyID} | {symbol: currencySymbol} | {symbol: Native(&#39;currencySymbol&#39;)} | {symbol: Foreign(&#39;currencySymbol&#39;)} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;)} | {multilocation: AssetMultilocationString | AssetMultilocationJson}*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Combines the getMaxNative and getMaxForeign transferable amount functions into one, so you don&#39;t have to specify whether you want a native or foreign asset.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getTransferableAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({address, node, currency </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*- {id: currencyID} | {symbol: currencySymbol} | {symbol: Native(&#39;currencySymbol&#39;)} | {symbol: Foreign(&#39;currencySymbol&#39;)} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;)} | {multilocation: AssetMultilocationString | AssetMultilocationJson}*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Get all the information about XCM transfer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getTransferInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({from, to, address, destinationAddress, currency </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*- {id: currencyID} | {symbol: currencySymbol} | {symbol: Native(&#39;currencySymbol&#39;)} | {symbol: Foreign(&#39;currencySymbol&#39;)} | {symbol: ForeignAbstract(&#39;currencySymbol&#39;)} | {multilocation: AssetMultilocationString | AssetMultilocationJson}*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, amount, api </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* api/ws_url_string optional */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Get bridge and execution fee for transfer from Parachain to Ethereum. Returns as an object of 2 values - [bridgeFee, executionFee]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getParaEthTransferFees</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*api - optional (Can also be WS port string or array o WS ports. Must be AssetHubPolkadot WS!)*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Verify whether XCM message you wish to send will reach above existential deposit on destination chain.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verifyEdOnDestination</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node,  currency: {symbol: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> multilocation: .. ,amount: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, address)</span></span></code></pre></div><h2 id="developer-experience" tabindex="-1">Developer experience <a class="header-anchor" href="#developer-experience" aria-label="Permalink to &quot;Developer experience&quot;">‚Äã</a></h2><h3 id="builder-pattern-experience" tabindex="-1">Builder pattern experience <a class="header-anchor" href="#builder-pattern-experience" aria-label="Permalink to &quot;Builder pattern experience&quot;">‚Äã</a></h3><p>When developing with the Builder pattern, the developer is guided by the typescript and thus knows which parameter can be added next. This increases the developer experience and makes SDK easier to use. <img width="459" alt="builder" src="https://user-images.githubusercontent.com/55763425/214562882-dd1a052e-c420-4131-bb50-3b656fabd10c.png"></p>`,53)]))}const y=i(e,[["render",l]]);export{E as __pageData,y as default};
